{"ast":null,"code":"import streams from \"../apis/streams\";\nimport history from \"../history\";\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM } from \"./types\";\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const createStream = formValues => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().auth;\n  const response = await streams.post(\"/streams\", { ...formValues,\n    userId\n  });\n  console.log(formValues);\n  console.log(response.data);\n  dispatch({\n    type: CREATE_STREAM,\n    payload: response.data\n  }); // Do some programmatic navigation to get the user back to the root route\n\n  history.push(\"/\");\n};\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get(\"/streams\");\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(`/streams/${id}`);\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.patch(`/streams/${id}`, formValues);\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n  history.push(\"/\");\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(`/streams/${id}`);\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n  history.push(\"/\");\n};","map":{"version":3,"sources":["/Users/hkoo/project/streams/client/src/actions/index.js"],"names":["streams","history","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","DELETE_STREAM","EDIT_STREAM","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","getState","auth","response","post","console","log","data","push","fetchStreams","get","fetchStream","id","editStream","patch","deleteStream","delete"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SACEC,OADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,YALF,EAMEC,aANF,EAOEC,WAPF,QAQO,SARP;AAUA,OAAO,MAAMC,MAAM,GAAGC,MAAM,IAAI;AAC9B,SAAO;AACLC,IAAAA,IAAI,EAAET,OADD;AAELU,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC3B,SAAO;AACLF,IAAAA,IAAI,EAAER;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMW,YAAY,GAAGC,UAAU,IAAI,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACtE,QAAM;AAAEP,IAAAA;AAAF,MAAaO,QAAQ,GAAGC,IAA9B;AACA,QAAMC,QAAQ,GAAG,MAAMnB,OAAO,CAACoB,IAAR,CAAa,UAAb,EAAyB,EAAE,GAAGL,UAAL;AAAiBL,IAAAA;AAAjB,GAAzB,CAAvB;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAYP,UAAZ;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAArB;AACAP,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEP,aAAR;AAAuBQ,IAAAA,OAAO,EAAEO,QAAQ,CAACI;AAAzC,GAAD,CAAR,CALsE,CAMtE;;AACAtB,EAAAA,OAAO,CAACuB,IAAR,CAAa,GAAb;AACD,CARM;AAUP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAMT,QAAN,IAAkB;AAClD,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAAC0B,GAAR,CAAY,UAAZ,CAAvB;AAEAV,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEN,aAAR;AAAuBO,IAAAA,OAAO,EAAEO,QAAQ,CAACI;AAAzC,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMI,WAAW,GAAGC,EAAE,IAAI,MAAMZ,QAAN,IAAkB;AACjD,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAAC0B,GAAR,CAAa,YAAWE,EAAG,EAA3B,CAAvB;AAEAZ,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEL,YAAR;AAAsBM,IAAAA,OAAO,EAAEO,QAAQ,CAACI;AAAxC,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMM,UAAU,GAAG,CAACD,EAAD,EAAKb,UAAL,KAAoB,MAAMC,QAAN,IAAkB;AAC9D,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAAC8B,KAAR,CAAe,YAAWF,EAAG,EAA7B,EAAgCb,UAAhC,CAAvB;AAEAC,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEH,WAAR;AAAqBI,IAAAA,OAAO,EAAEO,QAAQ,CAACI;AAAvC,GAAD,CAAR;AACAtB,EAAAA,OAAO,CAACuB,IAAR,CAAa,GAAb;AACD,CALM;AAOP,OAAO,MAAMO,YAAY,GAAGH,EAAE,IAAI,MAAMZ,QAAN,IAAkB;AAClD,QAAMhB,OAAO,CAACgC,MAAR,CAAgB,YAAWJ,EAAG,EAA9B,CAAN;AAEAZ,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEJ,aAAR;AAAuBK,IAAAA,OAAO,EAAEgB;AAAhC,GAAD,CAAR;AACA3B,EAAAA,OAAO,CAACuB,IAAR,CAAa,GAAb;AACD,CALM","sourcesContent":["import streams from \"../apis/streams\";\nimport history from \"../history\";\nimport {\n  SIGN_IN,\n  SIGN_OUT,\n  CREATE_STREAM,\n  FETCH_STREAMS,\n  FETCH_STREAM,\n  DELETE_STREAM,\n  EDIT_STREAM\n} from \"./types\";\n\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\n\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\n\nexport const createStream = formValues => async (dispatch, getState) => {\n  const { userId } = getState().auth;\n  const response = await streams.post(\"/streams\", { ...formValues, userId });\n  console.log(formValues);\n  console.log(response.data);\n  dispatch({ type: CREATE_STREAM, payload: response.data });\n  // Do some programmatic navigation to get the user back to the root route\n  history.push(\"/\");\n};\n\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get(\"/streams\");\n\n  dispatch({ type: FETCH_STREAMS, payload: response.data });\n};\n\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(`/streams/${id}`);\n\n  dispatch({ type: FETCH_STREAM, payload: response.data });\n};\n\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.patch(`/streams/${id}`, formValues);\n\n  dispatch({ type: EDIT_STREAM, payload: response.data });\n  history.push(\"/\");\n};\n\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(`/streams/${id}`);\n\n  dispatch({ type: DELETE_STREAM, payload: id });\n  history.push(\"/\");\n};\n"]},"metadata":{},"sourceType":"module"}